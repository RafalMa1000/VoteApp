//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface ICandidatesClient {
    getCandidates(): Observable<CandidatesVm>;
    createCandidates(command: CreateCandidateCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class CandidatesClient implements ICandidatesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getCandidates(): Observable<CandidatesVm> {
        let url_ = this.baseUrl + "/api/Candidates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCandidates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCandidates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CandidatesVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CandidatesVm>;
        }));
    }

    protected processGetCandidates(response: HttpResponseBase): Observable<CandidatesVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CandidatesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createCandidates(command: CreateCandidateCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Candidates";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateCandidates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateCandidates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateCandidates(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IVotersClient {
    getVoters(): Observable<VotingVm>;
    createVoters(command: CreateVoterCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class VotersClient implements IVotersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getVoters(): Observable<VotingVm> {
        let url_ = this.baseUrl + "/api/Voters";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVoters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVoters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VotingVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VotingVm>;
        }));
    }

    protected processGetVoters(response: HttpResponseBase): Observable<VotingVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VotingVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createVoters(command: CreateVoterCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Voters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateVoters(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateVoters(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateVoters(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IVotingActivitiesClient {
    getVotingActivity(): Observable<VotingActivitiesVm>;
    createVotingActivity(command: CreateVotingActivityCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class VotingActivitiesClient implements IVotingActivitiesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getVotingActivity(): Observable<VotingActivitiesVm> {
        let url_ = this.baseUrl + "/api/VotingActivities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVotingActivity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVotingActivity(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VotingActivitiesVm>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VotingActivitiesVm>;
        }));
    }

    protected processGetVotingActivity(response: HttpResponseBase): Observable<VotingActivitiesVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VotingActivitiesVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createVotingActivity(command: CreateVotingActivityCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/VotingActivities";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateVotingActivity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateVotingActivity(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreateVotingActivity(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CandidatesVm implements ICandidatesVm {
    candidates?: CandidateDto[];

    constructor(data?: ICandidatesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["candidates"])) {
                this.candidates = [] as any;
                for (let item of _data["candidates"])
                    this.candidates!.push(CandidateDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CandidatesVm {
        data = typeof data === 'object' ? data : {};
        let result = new CandidatesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.candidates)) {
            data["candidates"] = [];
            for (let item of this.candidates)
                data["candidates"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICandidatesVm {
    candidates?: CandidateDto[];
}

export class CandidateDto implements ICandidateDto {
    id?: number;
    name?: string;
    votesCount?: number;

    constructor(data?: ICandidateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.votesCount = _data["votesCount"];
        }
    }

    static fromJS(data: any): CandidateDto {
        data = typeof data === 'object' ? data : {};
        let result = new CandidateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["votesCount"] = this.votesCount;
        return data;
    }
}

export interface ICandidateDto {
    id?: number;
    name?: string;
    votesCount?: number;
}

export class CreateCandidateCommand implements ICreateCandidateCommand {
    name!: string;

    constructor(data?: ICreateCandidateCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateCandidateCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCandidateCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateCandidateCommand {
    name: string;
}

export class VotingVm implements IVotingVm {
    voters?: VoterDto[];

    constructor(data?: IVotingVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["voters"])) {
                this.voters = [] as any;
                for (let item of _data["voters"])
                    this.voters!.push(VoterDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VotingVm {
        data = typeof data === 'object' ? data : {};
        let result = new VotingVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.voters)) {
            data["voters"] = [];
            for (let item of this.voters)
                data["voters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVotingVm {
    voters?: VoterDto[];
}

export class VoterDto implements IVoterDto {
    id?: number;
    name?: string;
    hasVoted?: boolean;

    constructor(data?: IVoterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.hasVoted = _data["hasVoted"];
        }
    }

    static fromJS(data: any): VoterDto {
        data = typeof data === 'object' ? data : {};
        let result = new VoterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["hasVoted"] = this.hasVoted;
        return data;
    }
}

export interface IVoterDto {
    id?: number;
    name?: string;
    hasVoted?: boolean;
}

export class CreateVoterCommand implements ICreateVoterCommand {
    name!: string;

    constructor(data?: ICreateVoterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateVoterCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVoterCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    }
}

export interface ICreateVoterCommand {
    name: string;
}

export class VotingActivitiesVm implements IVotingActivitiesVm {
    votes?: VotingActivitiesDto[];

    constructor(data?: IVotingActivitiesVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["votes"])) {
                this.votes = [] as any;
                for (let item of _data["votes"])
                    this.votes!.push(VotingActivitiesDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VotingActivitiesVm {
        data = typeof data === 'object' ? data : {};
        let result = new VotingActivitiesVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.votes)) {
            data["votes"] = [];
            for (let item of this.votes)
                data["votes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IVotingActivitiesVm {
    votes?: VotingActivitiesDto[];
}

export class VotingActivitiesDto implements IVotingActivitiesDto {
    id?: number;
    voter?: VoterDto | undefined;
    candidate?: CandidateDto | undefined;

    constructor(data?: IVotingActivitiesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.voter = _data["voter"] ? VoterDto.fromJS(_data["voter"]) : <any>undefined;
            this.candidate = _data["candidate"] ? CandidateDto.fromJS(_data["candidate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): VotingActivitiesDto {
        data = typeof data === 'object' ? data : {};
        let result = new VotingActivitiesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["voter"] = this.voter ? this.voter.toJSON() : <any>undefined;
        data["candidate"] = this.candidate ? this.candidate.toJSON() : <any>undefined;
        return data;
    }
}

export interface IVotingActivitiesDto {
    id?: number;
    voter?: VoterDto | undefined;
    candidate?: CandidateDto | undefined;
}

export class CreateVotingActivityCommand implements ICreateVotingActivityCommand {
    voterId?: number;
    candidateId?: number;

    constructor(data?: ICreateVotingActivityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voterId = _data["voterId"];
            this.candidateId = _data["candidateId"];
        }
    }

    static fromJS(data: any): CreateVotingActivityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVotingActivityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voterId"] = this.voterId;
        data["candidateId"] = this.candidateId;
        return data;
    }
}

export interface ICreateVotingActivityCommand {
    voterId?: number;
    candidateId?: number;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}